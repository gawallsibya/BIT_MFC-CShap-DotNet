[PROCESS]

1. 생성
    WinExec, LoadModule
	내부적으로 CreateProcess호출함

    CreateProcess

2. 종료
   ExitProcess, TerminateProcess



[THREAD]

1. 생성
   CreateThread
  
2. 종료
   ExitThread, TerminateThread

3. 스레드 중지 재개
   ResumeThread & SuspendThread

   SuspendCount 0일때 실행

   ::Sleep(0)  : 현재 스레드 정지, 스케줄러가 같은 우선 순위의 다른 스레드 실행

4. 종료 코드 
 
   ::GetExitCodeThread(pThread->m_hTread, &dwCode);

3. 기타
   Thread우선순위


4. MFC에서 사용하는 스레드의 종류
   - 작업 스레드(Worker Thread)
     시간을 많이 필요로 하는 복잡한 계산 처리
     백그라운드 작업시 
     메시지 루프가 없기때문에 사용자 입력 불가 

	// 스레드 함수, 전달인자(통상 윈도우 핸들 or 객체 포인터 전달)
     AfxBeginThread(MyThreadProc, this);

 
   - 사용자 인터페이스 스레드(UI 스레드)
     메시지 루프를 가지고 있어 사용자 입력 가능
     대표적인 예 : 탐색기
       프로세스를 여러개 생성시켜도 스레드 개수만 증가함

     CWinThread에서 파생되는 클래스를 만들고,
     AfxBeginThread를 사용하여 생성


   - OnIdle()
     멀티 스레드가 생기기 전 백그라운드 작업을 위해 유휴시간(Idle time)을 사용함
     툴바나 상태를 갱신하거나 임시적인 객체포인터를 제거하기 위해 내부적으로 사용함


ex) 01_Thread,  02_UIThreadDemo 참조할것



[ SYNCHRONIZATION ]

CCriticalSection

   CCriticalSection g_cs;

   // 스레드 A
   g_cs.Lock();

   g_cs.Unlock();

   // 스레드 B
   g_cs.Lock();

   g_cs.Unlock();


CMutex
   
   CMutex g_mutex(FALSE, _T("MyMutex"));	// 소유여부

   g_mutex.Lock();
  // 링크드 리스트에 읽기/쓰기
   g_mutex.Unlock();	


   -----------------------
   if(g_mutex.Lock(600000))	// 1분동안 mutex사용을 기다리겠다
   {
   	g_mutex.Unlock();		// 
   }
   // 0리턴    : 1분이 지나서 리턴됨 : 누군가가 뮤텍스를 소유한 상태임
   // 0외 리턴 : 시간이 지나기 전에 뮤텍스가 해제됨


CEvent
  
   CEvent	g_event;	// 자동리셋이벤트, 초기 NULL_SIGNAL

   // 스레드 A
   InitBuffer(&buffer);
   g_event.SetEvent();

   // 스레드 B
   g_event.Lock();	// 신호 대기

  -------------------------------------

   CEvent	g_event(FALSE, TRUE);	// NULL_SIGNAL, 수동리셋이벤트

   // 스레드 A
   InitBuffer(&buffer);
   g_event.PulseEvent();   // 스프레드 B와 C해제

  // 스레드 B
   g_event.Lock();	// 신호대기

  // 스레드 C
   g_event.Lock();     // 신호대기



CSemaphore
  CSemaphore g_semaphore(3, 3);

  g_semaphore.Lock();

  g_semaphore.Unlock();



[ MMF ]

ex) Process_MMF 참조 할것



