

(2) 윈도우 프로시저의 확인

1) CSingleView::OnLButtonDown()
   함수의 첫번째 항에 브레이크 포인터를 걸고 F5 버튼 누름(디버그런)

2) CallStack을 통해 Stack 상태 확인
   WinMain에서부터 OnLButtonDown까지 스택에 쌓인 것 확인 가능 
	- AfxWndProcBase() 코드  : 단순히 AfxWndProc()을 호출
	- AfxWndProc() 코드 

	CWnd::FromHandlePermanent(hWnd) 호출 : 윈도우 핸들로부터 CWnd*를 얻어낸다.
	AfxCallWndProc()을 호출한다.
	-AfxCallWndProc() 코드 : 기본적으로 CWnd의 WindowProc()을 호출
	-WindowProc() 코드 : OnWndMsg()를 호출(메시지 프로시저가 실제 이 부분에 대응됨)

	
// 실제 메시지를 처리하는 부분
BOOL CWnd::OnWndMsg(UINT message, WPARAM wParam, LPARAM lParam, LRESULT* pResult)
{
	// special case for commands
	if (message == WM_COMMAND)		// 1) WM_COMAND와 WM_NOTIFY등의 메시지는
	{					//   특별하게 처리한다.
	// special case for notifies
	if (message == WM_NOTIFY)
	{
	// special case for activation
	if (message == WM_ACTIVATE)
	// special case for set cursor HTERROR
	if (message == WM_SETCURSOR &&
		_AfxHandleSetCursor(this, (short)LOWORD(lParam), HIWORD(lParam)))
	//-------------------------------------------------------------
	const AFX_MSGMAP* pMessageMap; pMessageMap = GetMessageMap();
	// 상위 클래스의 매시지 맵을 포함하여 메시지 맵을 찾는다.
		for (/* pMessageMap already init'ed */; pMessageMap != NULL;
			pMessageMap = pMessageMap->pBaseMap)	
		{
			ASSERT(pMessageMap != pMessageMap->pBaseMap);
			if (message < 0xC000)
			{
				// constant window message
				// 메시지 맵의 엔트리 검색
				if ((lpEntry = AfxFindMessageEntry(pMessageMap->lpEntries,
					message, 0, 0)) != NULL)
				{
					pMsgCache->lpEntry = lpEntry;
					AfxUnlockGlobals(CRIT_WINMSGCACHE);
					goto LDispatch;
				}
			}
			else
			{
				// registered windows message
				lpEntry = pMessageMap->lpEntries;
				while ((lpEntry = AfxFindMessageEntry(lpEntry, 0xC000, 0, 0)) != NULL)
				{
					UINT* pnID = (UINT*)(lpEntry->nSig);
					ASSERT(*pnID >= 0xC000 || *pnID == 0);
						// must be successfully registered
					if (*pnID == message)
					{
						pMsgCache->lpEntry = lpEntry;
						AfxUnlockGlobals(CRIT_WINMSGCACHE);
						goto LDispatchRegistered;
					}
					lpEntry++;      // keep looking past this one
				}			}		}
	UINT_PTR nSig;
	nSig = lpEntry->nSig;

	switch (nSig)		// 5) 시그너처로 구분후 실제의 메시지 핸들러를 호출
	{			//   각 메시지 핸들러마다 wParam, lParam의 의미가 다르다.
	default:			//   이를 서로 다른 시그너처 ID를 할당하여 구분한다.
		ASSERT(FALSE);
		break;
	case AfxSig_bD:
		lResult = (this->*mmf.pfn_bD)(CDC::FromHandle((HDC)wParam));
		break;
	case AfxSig_bb:     // AfxSig_bb, AfxSig_bw, AfxSig_bh
		lResult = (this->*mmf.pfn_bb)((BOOL)wParam);
		break;
	case AfxSig_bWww:   // really AfxSig_bWiw
		lResult = (this->*mmf.pfn_bWww)(CWnd::FromHandle((HWND)wParam),
			(short)LOWORD(lParam), HIWORD(lParam));
		break;


[ 정 리 ]
1.	MFC는 메시지 맵의 코드 자동화를 위해 
    DECLARE_MESSAGE_MAP 등 매크로를 사용한다.

2.	MFC는 후에 구현이 필요한 기능들에 대응하는 
    다수의 가상함수를 제공한다.
    InitInstance()는 대표적인 가상함수다.

3.	MFC의 클래스 위저드는 코드 관리를 위해 
    //{{AFX 로 시작하고 //}}AFX로 끝나는 특별한 주석을 사용한다.

4.	WinMain()은 AfxWinMain()을 호출한다. 
    AfxWinMain()은 스레드와 응용프로그램의 오브젝트에 대한 포인터를 얻고 
	InitInstance(), Run()과 ExitInstance()를 호출한다.

5.	MFC의 윈도우 프로시저 AfxWndProc()은 맵, 캐시 및 해싱을 사용하고 
    몇몇 특별한 윈도우 메시지는 메시지 맵이 아니라 if 문으로 처리한다.
