1) Doc / View 구조의 이해 

	- 한 데이터를 나타내는 방식이 다르다.

	- MFC는 데이터를 Document 클래스에 저장한다.

	- Document는 데이터와 관련된 기능을 지원하도록 
	  잘 설계되어 있다.

	- MFC는 Document의 데이터를 윈도우에 표시하기 위해
	  View 클래스를 사용한다.

	- Doc에서 View에 접근하기 위해, 혹은 반대로 접근하기 위한
	  어떠한 메커니즘을 제공한다.
	  맴버 함수로 구현되어 있다.

	- Doc/View 구조의 문서를 윈도우에 나타내기 위해, 
	  MainFrame 클래스를 사용한다.
	  눈에 보이는 윈도우(타이틀바, 메뉴바, 도구바, 상태바, 테두리)
	  를 구현한다.
	 
	- 이러한 3가지 클래스를 가지는 HAVE-A 어플리케이션 클래스가 
	  실제로 응용프로그램을 구현한다.


	- Application 클래스의 전역 객체  : theApp(CWinApp->CSingleApp)의 객체

	- App 클래스가 Frame, Doc, View를 생성하지만 보이지 않는다.
	  MFC의 상위클래스가 지원해 준다.
	  InitInstance()에서만들어 진다.


2) 다큐먼트, 뷰, 메인 프레임의 결합 : 템플릿 구성

	- SDI, MDI ( 여러 개의 자식 윈도우 ...)

	- SDI : CDocTemplate를 상속받은 CSingleDocTemplate에서 구현
	  MDI : CDocTemplate를 상속받은 CMultiDocTemplate에서 구현


3) 반드시 계층 구조 확인할 것 



4) 디폴트 코드 분석

   - Single.h  /  Single.cpp

   - 미리 컴파일된 해더(PCH) : c/c++ temp에 존재

   - WinMain찾기

   - 윈도우 프로시저 확인 

     1) WM_COMMAND와 WM_NOTIFY등의 메시지를 특별하게 처리한다.
	 2) 먼저 메시지를 최근의 캐시에서 해싱으로 찾는다.
	 3) 캐시에서 발견되지 않은 경우 메시지 맵 테이블을 전부 찾는다.
	    AfxFindMessageEntry()
		메시지 맵을 얻기 위해 GetMessage()를 사용하였고, while 바깥의
		for문은 메시지 맵의 엔트리를 검사하는 것이 아니라, 상위 클래스의
		메시지 맵을 포함하여 메시지 맵 자체를 찾는다.

	 4) 메시지를 테이블에서 발견한 경우, 메시지를 시그너처로 구분한다.
	 5) 시그너처로 구분한 후 실제의 메시지 핸들러를 호출한다.
