//-----------------------------------------------------------
// 03. 상태 관리 기본 개념
//------------------------------------------------------------


[ 상태 관리 ]

- 상태(State) : 동일한 페이지 또는 서로 다른 페이지에 대한 여러 요청 
  사이에서 생성된 모든 형태의 정보

- 정보 : 페이지 정보, 인증 정보, 권한 정보, 회원 정보, 게시판의 페이징 정보
         
         쇼핑몰의 장바구니 정보, 주문 정보 등 모든 형태의 정보를 의미

- 특별한 조치를 취하지 않는 이상 이런 정보들은 HTTP의상태 비저장 특성에 의해

  페이지가 랜더링 된 후 모두 사라지게 된다.


[ ASP.NET 2.0 에서 제공하는 상태 관리 옵션 ]


- 위치에 따른 분류 

   클라이언트측 상태 관리 옵션(정보를 클라이언트에 관리 : 보안에 취약, 정보의 양 제한적)

     - 뷰 상태(View State)
     - 컨트롤 상태(Control state)
     - 숨겨진 필드(Hidden Field)
     - 쿠키(Cookie)
     - 쿼리 문자열(Query String)	: 사용하지 않음

   서버측 상태 관리 옵션(정보를 서버에서 관리 : 데이터베이스를 통한 영구적 저장 가능)
     - 응용 프로그램 상태(Application state)
     - 세션 상태(Sesstion State)
     - 프로필 속성(Profile Property)
     - 데이터베이스(Database)


[ 클라이언트측 상태 관리 옵션 ]

1) 뷰 상태를 이용한 카운터 예제 확인

   - 장 점 

     서버 리소스를 사용하지 않음
     구현이 쉽다
     서버 컨트롤 상태가 자동으로 보존된다.


  - 단 점
   
     저장된 정보가 많을 경우 성능 저하
     - 문자열 형식으로 저장되기 때문임

     보안의 위험이 있슴
     - 정보가 인코딩 상태이지만 페이지의 소스를 직접 열면
       숨겨진 필드에 포함된 정보를 직접 볼 수 있다.
       즉, 정보 회손등의 문제 발생

   예제 확인)

      정보 저장 : ViewState["키"] = 값;

      정보 참조 : ViewState["키"]



2) 컨트롤 상태

   - 장 점
     서버 리소스 사용 안함
     기본적으로 숨겨진 필드에 저장됨
     안정성이 뛰어남

   - 단 점
     구현시 프로그래밍이 필요
     컨트롤 상태를 완전하게 활용하기 위해서는 컨트롤 상태를 저장하고 
     로드하는 코드를 임의로 작성해야 함

  *) 구현
    해당 컨트롤 초기화 도중 
     RegisterRequiresControlState() 메서드를 호출한 다음
     SaveControlState() 및 LoadControlState() 메서드를 재정의해야 함


3) 숨겨진 필드 

   - 장 점

     서버 리소스 사용 안함
     구현이 쉬움
     사용성이 뛰어남, 거의 모든 브라우저와 클라이언트 장치에서 숨겨진 필드가
     있는 폼을 지원함

   - 단 점
     보안 취약 : 페이지 소스를 열어 쉽게 볼 수 있고 수정 가능

     저장 구조가 제한적 : 단순히 하나의 문자열 정보만 저장가능
  
     저장된 정보가 많을 경우 성능이 저하됨

  예제 확인)



4) 쿠키 

   - 장 점
     서버 리소스 사용 안함
  
     구조적인 정보 저장 공간 제공 키/값
     
     쿠키 만료 기간 설정 가능

   - 단 점
     크기에 제한 : 대부분의 브라우저에서는 쿠키 크기를 4096byte로 제한

     사용자에 의한 쿠키 거부 발생 가능 : 쿠키 수신 기능 제어 가능

     보안 취약 : 컴퓨터에 저장된 쿠키는 사용자에 의해 직접 접근 가능
 
   예제 확인)








[ 서버측  상태 관리 옵션 ]



1) 응용 프로그램 상태 : 웹 서버의 메모리를 사용

   - 장  점 
     구현이 쉽다.

     모든 페이지에서 접근 할 수 있다.

   - 단 점
     정보의 영속성이 보장되지 않음
     : 웹 서버의 실행이 중지되거나, 웹 서버를 업그래이드하거나 종료하는 등으로 인해
       웹 서버 프로세스가 중지되면 응용 프로그램 상태 정보가 삭제됨

     스레드 안정성 보장 안됨

     서버 리소스를 사용하므로 서버 부하를 줄 수 있슴


2) 세션 상태 

   - 장 점
     구현이 쉽다.
     정보의 영속성 보장
     세션 고유의 이벤트 지원
     모든 페이지 접근 가능

   - 단 점
     서버 리소스 사용 

    예제 확인)


-----------------------------------------------
응용 프로그램 상태 

 - 자주 변경되지 않고 많은 사용자가 이용하는 전역적인 정보를 저장해야 할 경우
 - 보안이 중요하지 않은 경우
 - 많은 양의 정보가 아닌 경우


세션 상태 

  - 개별 세션에 따라달라지는, 수명이 짧은 정보를 저장해야 하는 경우
  - 보안이 중요하지 않은 경우
  - 많은 양의 정보가 아닌 경우
  - 서버 리소스를 많이 사용하게 되는 단점 이해

데이터 베이스 

  - 거래를 관리하는 많은 양의 정보를 저장하는 경우
  - 응용 프로그램 및 세션을 다시 시작하더라도 정보가 유지되어야 하는 경우 

























   

  


















































