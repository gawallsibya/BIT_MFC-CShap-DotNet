using System;
using System.Collections.Generic;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Windows.Media.Animation;
using System.ComponentModel;

namespace LayoutDemo
{
    public class CanvasClone : Panel
    {
        // Define two dependency properties.
        public static readonly DependencyProperty LeftProperty;
        public static readonly DependencyProperty TopProperty;

        static CanvasClone()
        {
            // Register the dependency properties as attached properties.
            //  Default value is 0 and any change invalidates parent's arrange.
            LeftProperty = DependencyProperty.RegisterAttached("Left",
                    typeof(double), typeof(CanvasClone),
                    new FrameworkPropertyMetadata(0.0,
                        FrameworkPropertyMetadataOptions.AffectsParentArrange,new PropertyChangedCallback(CanvasClone.OnPositioningChanged)));

            TopProperty = DependencyProperty.RegisterAttached("Top",
                    typeof(double), typeof(CanvasClone),
                    new FrameworkPropertyMetadata(0.0,
                        FrameworkPropertyMetadataOptions.AffectsParentArrange, new PropertyChangedCallback(CanvasClone.OnPositioningChanged)));
        }
        // Static methods to set and get attached properties.
        [AttachedPropertyBrowsableForChildrenAttribute, TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null") ] 
        public static void SetLeft(DependencyObject obj, double value)
        {
            obj.SetValue(LeftProperty, value);
        }
        [AttachedPropertyBrowsableForChildrenAttribute, TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")] 
        public static double GetLeft(DependencyObject obj)
        {
            return (double)obj.GetValue(LeftProperty);
        }
        [AttachedPropertyBrowsableForChildrenAttribute, TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")] 
        public static void SetTop(DependencyObject obj, double value)
        {
            obj.SetValue(TopProperty, value);
        }
        [AttachedPropertyBrowsableForChildrenAttribute, TypeConverter("System.Windows.LengthConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")] 
        public static double GetTop(DependencyObject obj)
        {
            return (double)obj.GetValue(TopProperty);
        }
        // Override of MeasureOverride just calls Measure on children.
        protected override Size MeasureOverride(Size sizeAvailable)
        {
            foreach (UIElement child in InternalChildren)
                child.Measure(new Size(Double.PositiveInfinity,
                                       Double.PositiveInfinity));

            // Return default value (0, 0).
            return base.MeasureOverride(sizeAvailable);
        }
        // Override of ArrangeOverride positions children.
        protected override Size ArrangeOverride(Size sizeFinal)
        {
            foreach (UIElement child in InternalChildren)
                child.Arrange(new Rect(
                    new Point(GetLeft(child), GetTop(child)), child.DesiredSize));

            return sizeFinal;
        }
        private static void OnPositioningChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            UIElement reference = d as UIElement;
            if (reference != null)
            {
                Canvas parent = VisualTreeHelper.GetParent(reference) as Canvas;
                if (parent != null)
                {
                    parent.InvalidateArrange();
                }
            }
        }

    }
}
 



