p2-25

        ABCD  AC  ADD 

    ex) WHERE ename like 'A%'  ==> ABCD  AC  ADD 

         ename like 'A_'                ==> AC
-----------------------------------------------------
p2-23
    ex) WHERE  depno = 10 or depno = 20

         WHERE depno in(10, 20)    //  개수 제한 없슴


    ex) WHERE sal > 2500 

          WHERE sal > any(500, 1500, 2500)  // 개수 제한 없슴 

              ==> 괄호 안에 존재하는 것 중 어느 누구라도 만족하면 
                    항상 TRUE 


           WHERE sal > all (500, 1500, 2500) //  개수 제한 없슴 
                     
               ==> 무조건 2500 보다 커야 한다. 

--------------------------------------------
p2-18

   * 기능적인 측면에서는 둘 다 동일하다.
   
   CASE        : 10번과 20번 부서는 각각 10%, 20% 인상을 하고, 
                     나머지 부서는 동결할 경우

   DECODE   : 나이가 10살이상 19살 이하는 10대,
                     나이가 20살이상 29살 이하는 20대,

-------------------------------------------
p2-16
   ex) SELECT DISTINCT  row, row1 FROM .....

         row1과 row2 의 조합으로 중복 여부를 판단한다.....


--------------------------------------------
p2-10 별칭
     ex) SELECT 컬럼명 AS 별칭 ....
          
          SELECT 컬럼명 별칭  ....

---------------------------------------------------
p2-8 NVL Function
        ex) SELECT ename , sal * 12 + comm FROM emp;

            => 개선 SELECT ename, (sal *12) + NVL(comm, 0) FROM emp;

            => 개선 SELECT ename, NVL(sal*12 + comm, sal*12) FROM emp;

       NVL2(expr1, expr2, expr3)  : NVL의 확장형
            expr1 이 NULL이면 expr3가 반환됨
                         NULL이 아니면 expr2가 반환됨

       NULLIF(expr1, expr2)
        두 개의 식을 비교하여 둘이 같으면 NULL 을 다르면 expr1을 반환함

------------------------------------------------------------
p2-4  [ 연산자 ]

1. 수식 연산자 
     + - (양수/음수 표시)   
       ex) SELECT * FROM  order_items WHERE quantity = -1;

     + - (덧셈/뺄셈)
       ex) SELECT hire_date FROM employee WHERE SYSDATE - hire_date >365;
  
     * /  (곱셈 /나눗셈)
       ex) UPDATE employee SET salary = salary * 1.1;

2. 문자 연산자 
     ||( 문자들을 합쳐준다.)
      ex) SELECT '홍 ' || '길동' FROM dual;

3. 논리 연산자 
    >, < , = , >=, <=  : 논리 연산을 수행
    ex) SELECT * FROM employees WHERE salary > 1000;

4. 계층형 쿼리 연산자
    PRIOR, CONNECT_BY_ROW

5. SET 연산자
     UNION, UNION ALL, INTER SET, MINUS
-----------------------------------------------------
p2-1

SELCT  컬럼1, 컬럼2
FROM   테이블1, 테이블2
WHERE  조건절 ;

ex)  emp 테이블에서 ename 정보를 얻고자 한다.
      단, 입사일이( hiredate) 이 '2006-01-01' 이후인 사람의 정보가 필요하다.
       SELECT ename
       FROM   emp
       WHERE hiredate >= '1982-01-01' ;


-----------------------------------------------
Relational Database
  - 2차원 적인 구조
  - 데이터 무결성, 트랜젝션 처리 기능  
     DBMS의 기본적인 기능면에서 뛰어난 성능을 보여준다.
  - 질의어를 사용한 데이터 접근 방법이다.

O-O Database
  - 사용자가 정의한 사용자 정의  type을 지원
  - 비정형복합정보 저장 가능
     정형(문자, 날짜, 숫자)==> 일반 DBMS에서 지원
     비정형(이메일, 문서, bmp파일)

  - 객체들 사이의 참조 구조를 이용한 접근 가능
  - OOP 프로그래밍 언어와 유사한 구조
  - 단점)  트랜젝션 처리, 백업 및 복구 기능 등
              기본적인 기능의 성능이 떨어짐

------------------------------------
오라클은 객체관계형 DB이다. =>  두개의 장점을 가져왔다.
  - 사용자 정의 타입을 지원한다.
  - 참조 타입을 지원한다.( JOIN )
  - 중첩 table 을 지원한다.
     테이블을 구성하는 로우자체가 다른 테이블로 구성될 수 있다.
  - 대단위 객체의 저장 추출 가능
     ex) 이미지, 오디오 및 비디오 등의 비정형 데이터
  - 객체간 상속관게 지원(OBJECT TYPE)









DDL :  객체(ex 테이블, DB, 인덱서, 뷰, 트리거...)를 생성 /소멸
          CREATE / DROP / ALTER(생성객체 수정) / TRUNCATE(저장 데이터 삭제) 
					*)ROLLBACK이 안된다.
					*)자체적으로 COMMIT기능이 있다

DML : 데이터 조회 : SELECT 
         데이터 삭제 : DELETE
         데이터 수정 : 데이터 입력  : INSERT
                            데이터 수정  : UPDATE

DCL : DB 접근 권한 설정  : GRANT(권한부여) / REVOKE(권한 제거)