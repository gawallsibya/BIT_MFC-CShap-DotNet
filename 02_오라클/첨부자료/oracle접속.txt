출처 : API 완전정복 

// API 프로젝트에 사용될 경우 다음 두 줄을 포함시켜 주면 된다.
#include "stdafx.h"
#include <windows.h>
#include <db\CQuery.h>

// MFC 프로젝트에 사용될 경우는 stdafx.h에 CQuery.h를 포함시켜 주고 다음 한줄만
// 있으면 된다.


///////////////////////////////////////////////////////////////////////////////
/*
CQuery 클래스:ODBC의 래퍼 클래스. API 수준에서 재사용 가능하도록 작성하였다.
SQL문을 편리하게 실행하고 결과를 쉽게 읽는데 초점을 맞추었으며 SQL 서버와 
액세스에서 완벽하게 테스트되었다.
255자 이하의 정수, 문자열 컬럼에 대해서만 사용 가능하며 그 이상의 길이를 가
지는 필드는 "오른쪽 잘림" 진단 경고가 발생하므로 이 클래스로 읽을 수 없으며
ODBC API 함수를 직접 사용해야 한다.
최대 컬럼 개수는 100개이다. 초과시 사정없이 에러 메시지 박스를 출력하므로 이 
한도를 알아서 넘지 않도록 주의해야 한다. 특히 필드수가 많은 테이블을 select *
로 읽는 것은 삼가하는 것이 좋다.
전진 전용 커서를 사용하므로 이미 읽은 레코드는 쿼리를 다시 실행해야만 읽을 수
있다. 

사용법
1.CQuery 클래스의 객체를 생성한다. 가급적이면 전역으로 선언하는 것이 좋으며 필요한 수만큼 객체를 만든다. 보통 세 개 정도면 충분하다.
2.적절한 Connect 함수를 호출하여 데이터 소스에 연결한다.
3.Exec 함수로 SQL문을 실행한다. 에러 처리는 Exec 함수 내부에서 처리한다.
4.Fetch 함수로 결과 셋 하나를 가져온다. 여러개의 결과셋이 있는 경우는 while
  루프를 돌면서 차례대로 꺼내올 수 있다.
5.Get* 함수로 컬럼 값을 읽는다.
6.Clear 함수로 명령 핸들을 닫는다.(Select문일 경우만)
7.객체를 파괴한다. 전역 객체인 경우는 일부러 파괴할 필요가 없다.
*/

// 생성자:각종 초기화를 담당한다.
CQuery::CQuery ()
{
 m_iAffectCount = -1;
 m_ret   = SQL_SUCCESS;

 m_hStmt   = NULL;
 m_hDbc   = NULL;
 m_hEnv   = NULL;

 // 환경 핸들을 할당하고 버전 속성을 설정한다.
 ////////////////////////////
 SQLAllocHandle (SQL_HANDLE_ENV, SQL_NULL_HANDLE, &m_hEnv);
 SQLSetEnvAttr (m_hEnv, SQL_ATTR_ODBC_VERSION, (SQLPOINTER) SQL_OV_ODBC3, SQL_IS_INTEGER);
 ////////////////////////////
}

// 파괴자:연결 핸들을 해제한다.
CQuery::~CQuery()
{
 Disconnect ();

 if (m_hEnv) 
  SQLFreeHandle (SQL_HANDLE_ENV, m_hEnv);
}

// 연결 핸들을 할당하고 연결한 후 명령핸들까지 같이 할당한다.
// Type=1:ConStr은 MDB 파일의 경로를 가진다. 경로 생략시 현재 디렉토리에서 MDB를 찾는다.
// Type=2:ConStr은 SQL 서버의 연결 정보를 가지는 DSN 파일의 경로를 가진다. 
//        경로는 반드시 완전 경로로 지정해야 한다.
// Type=3:SQLConnect 함수로 DSN에 직접 연결한다.
// 연결 또는 명령 핸들 할당에 실패하면 FALSE를 리턴한다.

BOOL CQuery::Connect (LPCTSTR szConStr, LPCTSTR szUID, LPCTSTR szPWD)
{
 // 연결핸들 할당..
 SQLAllocHandle (SQL_HANDLE_DBC, m_hEnv, &m_hDbc);

 // 데이터 소스에 연결 시도...
 m_ret = SQLConnect (m_hDbc, 
      (SQLTCHAR *) szConStr, 
      SQL_NTS, 
      (SQLTCHAR *) szUID, 
      SQL_NTS, 
      (SQLTCHAR *) szPWD, 
      SQL_NTS);

 // 접속 에러시 진단 정보를 보여준다.
 if ((m_ret != SQL_SUCCESS) && (m_ret != SQL_SUCCESS_WITH_INFO)) 
 {
#ifdef _DEBUG
  SQLRETURN  Ret;
  SQLTCHAR  szSqlState [6], szMsg [255];
  int    i = 1;
  SQLINTEGER  NativeError;
  SQLSMALLINT  MsgLen;

  while (Ret = SQLGetDiagRec (SQL_HANDLE_DBC, 
         m_hDbc, 
         i, 
         szSqlState, 
         &NativeError, 
         szMsg, 
         sizeof(szMsg) * sizeof (TCHAR),
         &MsgLen) != SQL_NO_DATA) 
  {
   i++;

   MessageBox (NULL, (LPCTSTR) szMsg, _T("Error"), MB_OK);
  }
#endif

  return FALSE;
 }

 // 명령 핸들을 할당한다.
 m_ret = SQLAllocHandle (SQL_HANDLE_STMT, m_hDbc, &m_hStmt);

 if ((m_ret != SQL_SUCCESS) && (m_ret != SQL_SUCCESS_WITH_INFO)) 
 {
  m_hStmt = NULL;
  return FALSE;
 }

 return TRUE;
}

BOOL CQuery::DriverConnect(LPCTSTR szConnStr, LPTSTR szOutStr, unsigned int iBufSize)
{
 SQLSMALLINT cbOutCon = 0;

 // 연결 타입에 따라 MDB 또는 SQL 서버, 또는 DSN에 연결한다.
 SQLAllocHandle (SQL_HANDLE_DBC, m_hEnv, &m_hDbc);
 
 m_ret = SQLDriverConnect (m_hDbc, 
         NULL, 
         (SQLTCHAR *) szConnStr, 
         lstrlen (szConnStr) * sizeof (TCHAR), 
         (SQLTCHAR *) szOutStr,
         iBufSize, 
         &cbOutCon, 
         SQL_DRIVER_NOPROMPT);

 // 접속 에러시 진단 정보를 보여준다.
 if ((m_ret != SQL_SUCCESS) && (m_ret != SQL_SUCCESS_WITH_INFO)) 
 {
#ifdef _DEBUG
  SQLRETURN  Ret;
  SQLTCHAR  szSqlState [6], szMsg [255];
  int    i = 1;
  SQLINTEGER  NativeError;
  SQLSMALLINT  MsgLen;

  while (Ret = SQLGetDiagRec (SQL_HANDLE_DBC, 
         m_hDbc, 
         i, 
         szSqlState, 
         &NativeError, 
         szMsg, 
         sizeof(szMsg) * sizeof (TCHAR),
         &MsgLen) != SQL_NO_DATA) 
  {
   i++;

   MessageBox (NULL, (LPCTSTR) szMsg, _T("Error"), MB_OK);
  }
#endif

  return FALSE;
 }

 // 명령 핸들을 할당한다.
 m_ret = SQLAllocHandle (SQL_HANDLE_STMT, m_hDbc, &m_hStmt);

 if ((m_ret != SQL_SUCCESS) && (m_ret != SQL_SUCCESS_WITH_INFO)) 
 {
  m_hStmt = 0;
  return FALSE;
 }

 return TRUE;
}

// SQL문을 실행한다. 실패시 진단 정보를 출력하고 FALSE를 리턴한다.
BOOL CQuery::Exec (LPCTSTR szSQL)
{
 // SQL문을 실행한다. SQL_NO_DATA를 리턴한 경우도 일단 성공으로 취급한다. 
 // 이 경우 Fetch에서 EOF를 리턴하도록 되어 있기 때문에 진단 정보를 출력할 필요는 없다.
 m_ret = SQLExecDirect (m_hStmt, (SQLTCHAR *) szSQL, SQL_NTS);

 if ((m_ret != SQL_SUCCESS) && (m_ret != SQL_SUCCESS_WITH_INFO) && (m_ret != SQL_NO_DATA)) 
 {
  PrintDiag ();
  return FALSE;
 }

 // Update, Delete, Insert 명령시 영향받은 레코드 개수를 구해 놓는다.
 SQLRowCount (m_hStmt, &m_iAffectCount);

 SQLNumResultCols  (m_hStmt, &m_nCol);

 if (m_nCol > MAXCOL) 
 {
  ::MessageBox(NULL, _T("최대 컬럼 수를 초과했습니다"), _T("CQuery 에러"), MB_OK);
  return FALSE;
 }

 // nCol이 0인 경우는 Select문 이외의 다른 명령을 실행한 경우이므로 
 // 바인딩을 할 필요가 없다.
 if (m_nCol == 0) 
 {
  Clear ();
  return TRUE;
 }

 // 모든 컬럼을 문자열로 바인딩해 놓는다. Col배열은 zero base, 
 // 컬럼 번호는 one base임에 유의할 것
 for (int i = 0; i < m_nCol; i++) 
 {
  SQLBindCol (m_hStmt, i + 1, SQL_C_TCHAR, m_Col [i], 255, &m_lCol [i]);
  SQLDescribeCol (m_hStmt, i + 1, m_ColName [i], 30, NULL, NULL, NULL, NULL, NULL);
 }

 return TRUE;
}

// SQL문을 실행하고 결과셋의 첫 칼럼에서 정수값을 읽어 리턴해 준다. 
// 결과를 얻은 후 정리까지 해 준다.
int CQuery::ExecGetInt (LPCTSTR szSQL)
{
 int i;

 if (Exec (szSQL) == FALSE) 
  return CQUERYERROR;

 // 데이터가 없는 경우 EOF를 리턴한다.
 if (Fetch () == SQL_NO_DATA) 
 {
  Clear ();
  return CQUERYEOF;
 }

 i = GetInt (1);
 Clear ();

 return i;
}

// SQL문을 실행하고 결과셋의 첫 칼럼에서 문자열을 읽어 리턴해 준다.
void CQuery::ExecGetStr (LPCTSTR szSQL, LPTSTR buf)
{
 // SQL문 실행중 에러가 발생한 경우 문자열 버퍼에 에러를 돌려 보낸다.
 if (Exec (szSQL) == FALSE) 
 {
  lstrcpy (buf, _T("CQUERYERROR"));
  return;
 }

 // 데이터가 없는 경우 EOF를 리턴한다.
 if (Fetch () == SQL_NO_DATA) 
 {
  Clear ();
  lstrcpy (buf, _T("EOF"));
  return;
 }

 GetStr (1, buf);
 Clear ();
}

// 결과셋에서 한 행을 가져온다.
SQLRETURN CQuery::Fetch()
{
 m_ret = SQLFetch (m_hStmt);

 return m_ret;
}

// 커서를 닫고 바인딩 정보를 해제한다.
void CQuery::Clear ()
{
 SQLCloseCursor (m_hStmt);
 SQLFreeStmt  (m_hStmt, SQL_UNBIND);
}

// 컬럼 이름으로부터 컬럼 인덱스를 찾는다. 없을 경우 -1을 리턴한다.
int CQuery::FindCol(LPCTSTR name)
{
 for (int i = 0; i < m_nCol; i++) 
 {
  if (lstrcmp (name, (LPCTSTR) m_ColName [i]) == 0)
   return i+1;
 }

 return -1;
}

// nCol의 컬럼값을 정수로 읽어준다. NULL일 경우 CQUERYNULL을 리턴한다.
int CQuery::GetInt(int nCol)
{
 if (nCol > this->m_nCol)
  return CQUERYNOCOL;

 if (m_lCol [nCol - 1] == SQL_NULL_DATA) 
 {
  return CQUERYNULL;
 }
 else 
 {
#ifdef UNICODE
  return _ttoi (m_Col [nCol - 1]);
#else
  return atoi (m_Col [nCol - 1]);
#endif

 }
}

// sCol의 컬럼값을 정수로 읽어준다.
int CQuery::GetInt (LPCTSTR sCol)
{
 int n;
 n = FindCol (sCol);

 if (n == -1)
 {
  return CQUERYNOCOL;
 } 
 else 
 {
  return GetInt (n);
 }
}

// nCol의 컬럼값을 문자열로 읽어준다. NULL일 경우 문자열에 NULL을 채워준다. 
// buf의 길이는 최소한 256이어야 하며 길이 점검은 하지 않는다.
void CQuery::GetStr (int nCol, LPTSTR buf)
{
 if (nCol > this->m_nCol) 
 {
  lstrcpy (buf, _T("CQUERYNOCOL"));
  return;
 }

 if (m_lCol [nCol - 1] == SQL_NULL_DATA) 
 {
  lstrcpy (buf, _T("NULL"));
 } 
 else 
 {
  lstrcpy (buf, m_Col [nCol - 1]);
 }
}

// sCol의 컬럼값을 문자열로 읽어준다.
void CQuery::GetStr(LPTSTR sCol, LPTSTR buf)
{
 int n;
 n = FindCol (sCol);

 if (n == -1)
 {
  lstrcpy (buf, _T("ERROR:Colume not found"));
 } 
 else 
 {
  GetStr (n, buf);
 }
}

// 에러 발생시 진단 정보를 출력해 준다.
void CQuery::PrintDiag ()
{
 int    ii = 1;
 SQLRETURN  Ret;
 SQLINTEGER  NativeError;
 SQLTCHAR  SqlState[6], Msg[255];
 SQLSMALLINT  MsgLen;
 TCHAR   str [256];

 while (Ret = SQLGetDiagRec (SQL_HANDLE_STMT, m_hStmt, ii, SqlState, &NativeError, Msg, sizeof (Msg), &MsgLen) != SQL_NO_DATA) 
 {
  wsprintf (str, _T("SQLSTATE:%s, 진단정보:%s"), (LPCTSTR) SqlState, (LPCTSTR) Msg);

  ::MessageBox (NULL, str, _T("진단 정보"), 0);
  ii++;
 }
}

// BLOB 데이터를 buf에 채워준다. 이때 buf는 충분한 크기의 메모리를 미리 할당해 
// 놓아야 한다. NULL일 경우 0을 리턴하고 에러 발생시 -1을 리턴한다. 성공시 읽은 
// 총 바이트 수를 리턴한다. szSQL은 하나의 BLOB 필드를 읽는 Select SQL문이어야 한다.
int CQuery::ReadBlob (LPCTSTR szSQL, void *buf)
{
 SQLCHAR  BinaryPtr [BLOBBATCH];
 SQLINTEGER LenBin;
 TCHAR  *p;
 int   nGet;
 int   TotalGet = 0;

 m_ret = SQLExecDirect (m_hStmt,(SQLTCHAR *) szSQL, SQL_NTS);

 if (m_ret != SQL_SUCCESS) 
 {
  PrintDiag ();
  return -1;
 }

 while ((m_ret = SQLFetch (m_hStmt)) != SQL_NO_DATA) 
 {
  p = (TCHAR *) buf;

  while ((m_ret = SQLGetData (m_hStmt, 1, SQL_C_BINARY, BinaryPtr, sizeof (BinaryPtr), &LenBin)) != SQL_NO_DATA) 
  {
   if (LenBin == SQL_NULL_DATA) 
   {
    Clear ();
    return 0;
   }

   if (m_ret == SQL_SUCCESS)
    nGet = LenBin;
   else
    nGet = BLOBBATCH;

   TotalGet += nGet;
   memcpy (p, BinaryPtr, nGet);

   p += nGet;
  }
 }

 Clear ();

 return TotalGet;
}

// buf의 BLOB 데이터를 저장한다. szSQL은 하나의 BLOB 데이터를 저장하는 Update, Insert
// SQL문이어야 한다.
void CQuery::WriteBlob (LPCTSTR szSQL, void *buf, int size)
{
 SQLINTEGER  cbBlob;
 TCHAR   tmp [BLOBBATCH], *p;
 SQLPOINTER  pToken;
 int    nPut;

 cbBlob = SQL_LEN_DATA_AT_EXEC (size);

 SQLBindParameter (m_hStmt, 1, SQL_PARAM_INPUT, SQL_C_BINARY, SQL_LONGVARBINARY, size, 0,( SQLPOINTER) 1, 0, &cbBlob);

 SQLExecDirect (m_hStmt, (SQLTCHAR *) szSQL, SQL_NTS);

 m_ret = SQLParamData (m_hStmt, &pToken);

 while (m_ret == SQL_NEED_DATA) 
 {
  if (m_ret == SQL_NEED_DATA) 
  {
   if ((int) pToken == 1) 
   {
    for (p = (TCHAR *) buf; p < (TCHAR *) buf + size; p += BLOBBATCH) 
    {
     nPut = min (BLOBBATCH, (TCHAR *) buf + size - p);

     memcpy (tmp, p, nPut);
     SQLPutData (m_hStmt, (PTR) tmp, nPut);
    }
   }
  }

  m_ret = SQLParamData (m_hStmt, &pToken);
 }

 Clear ();
}

/*
void ProcessLogMessages (SQLSMALLINT iHandleType, SQLHANDLE pHandle, TCHAR *szLogStr, int ConnInd)
{
 RETCODE   Ret = SQL_SUCCESS;
 UCHAR   szSqlState [MAXBUFLEN] = "", szErrMsg [MAXBUFLEN] = "";
 SDWORD   plm_pfNativeError = 0L;
 SWORD   ipcbErrMsg = 0;
 SQLSMALLINT  iRecNum = 1;
 SDWORD   plm_SS_MsgState = 0, plm_SS_Severity = 0;
 SQLINTEGER  plm_Rownumber = 0;
 USHORT   plm_SS_Line;
 SQLSMALLINT  plm_cbSS_Procname, plm_cbSS_Srvname;
 SQLTCHAR  plm_SS_Procname [MAXNAME], plm_SS_Srvname [MAXNAME];

 while (Ret != SQL_NO_DATA_FOUND) 
 {
  Ret = SQLGetDiagRec (iHandleType, pHandle, iRecNum, szSqlState, &plm_pfNativeError, szErrMsg, MAXBUFLEN - 1, &ipcbErrMsg);

  if (Ret != SQL_NO_DATA_FOUND) 
  {
   if (ConnInd) 
   {
    Ret = SQLGetDiagField (iHandleType, pHandle, iRecNum, SQL_DIAG_ROW_NUMBER, &plm_Rownumber, SQL_IS_INTEGER, NULL);
    Ret = SQLGetDiagField (iHandleType, pHandle, iRecNum, SQL_DIAG_SS_LINE, &plm_SS_Line, SQL_IS_INTEGER, NULL);
    Ret = SQLGetDiagField (iHandleType, pHandle, iRecNum, SQL_DIAG_SS_MSGSTATE, &plm_SS_MsgState, SQL_IS_INTEGER, NULL);
    Ret = SQLGetDiagField (iHandleType, pHandle, iRecNum, SQL_DIAG_SS_SEVERITY, &plm_SS_Severity, SQL_IS_INTEGER, NULL);
    Ret = SQLGetDiagField (iHandleType, pHandle, iRecNum, SQL_DIAG_SS_PROCNAME, &plm_SS_Procname, sizeof(plm_SS_Procname), &plm_cbSS_Procname);
    Ret = SQLGetDiagField (iHandleType, pHandle, iRecNum, SQL_DIAG_SS_SRVNAME, &plm_SS_Srvname, sizeof(plm_SS_Srvname), &plm_cbSS_Srvname);
   }

   printf("szSqlState = %s\n",  szSqlState);
   printf("pfNativeError = %d\n", plm_pfNativeError);
   printf("szErrorMsg = %s\n",  szErrMsg);
   printf("pcbErrorMsg = %d\n\n", ipcbErrMsg);

   if (ConnInd) 
   {
    printf("ODBCRowNumber = %d\n", plm_Rownumber);
    printf("SSrvrLine = %d\n", plm_Rownumber);
    printf("SSrvrMsgState = %d\n",plm_SS_MsgState);
    printf("SSrvrSeverity = %d\n",plm_SS_Severity);
    printf("SSrvrProcname = %s\n",plm_SS_Procname);
    printf("SSrvrSrvname = %s\n\n",plm_SS_Srvname);
   }
  }

  iRecNum++; //Increment to next diagnostic record.
 }
}*/

bool CQuery::Disconnect()
{
 if (m_hStmt) 
  SQLFreeHandle (SQL_HANDLE_STMT, m_hStmt);

 m_hStmt = NULL;

 if (m_hDbc) 
  SQLDisconnect (m_hDbc);

 m_hDbc = NULL;

 if (m_hDbc) 
  SQLFreeHandle (SQL_HANDLE_DBC, m_hDbc);

 return true;
}

[출처] C++, WIN32 API에서 ODBC (오라클,MS-SQL,MDB) 사용하기|작성자 또식이

--------------------------------

Oracle.connect("jdbc:oracle:thin:@localhost:1521:oradb"

, username, password);

 

Oracle 데이타 베이스에 대한 Connection 자원을 획득하는 것입니다.

 

우리가 SQL 명령을 내리기 위해선 먼저 커넥션 자원을 획득한 다음에 내일수 있습니다.

 

sqlplus 같은 프로그램도 먼저 접속한 다음에 

 

select * from 테이블

 

이런 형식으로 명령을 내리잖아요...

 

이제 설명 들어갑니다.

Oracle.connect 오라클 dbms 에 접속하라는 것을 의미

jdbc:oracle:thin:@localhost:1521:oradb 이것은 나누어서 설명 해드리죠

jdbc:oracle:thin : JDBC 를 통해 오라클 thin 드라이브로 접속하여라

@localhost   : 접속할 dbms 의 주소 (localhost 는 자신의 네트워크 정보인 127.0.0.1 입니다.) 

1521 : 접속할 당시 포트 번호 (오라클은 기본적으로 1521 포트를 사용합니다.)

oradb : 오라클의 데이타 베이스 명

username : 접속 사용자명

password : 접속 패스워드

 

 이상입니다.

 

 

 

 

 

드라이버에 대한 추가질문에 대한 답변입니다.

 

JDBC 드라이버는 크게 4가지 유형으로 나눕니다.

 

TYPE 1 : ODBC 브릿지 드라이버
    - 이것은 JDBC가 ODBC 드라이버에 연결된 형태 입니다.

 

TYPE 2 : Native - API Partly - Java Driver (좀길죠 ^^;)


    - 이것은 JDBC API 호출을 특정 데이타메이스의 클라이언트 호출 API 로 바꿔주는 드라이버 입니다. 대표적으로 오라클의 OCI 드라이버를 말할 수 있는데요. 커넥션 획득 절차는 다음과 같이 이루어 집니다.
      JDBC API -> D/B API 드라이버 -> DBMS 

 

TYPE 3 : A net-protocol all-java 드라이버
    - 이것은 클라이언트의 JDBC API 호출을 특정 DBMS의 프로토콜과 전혀 상관없는 독자적인 프로토콜로 변경하여 접근하는 방식으로 DBMS 서버에선 중간에 미들웨어를 두어 그 프로토콜을 특정 DBMS의 API 로 변경하여 처리하게 됩니다. 커넥션 획득 절차는 다음과 같이 이루어 집니다.
애플릿 또는 어플리케이션이 JDBC API 호출 -> JDBC Net 드라이버가 독자적인 프로토콜로 변환 -> DBMS 서버의 미들웨어가 특정 데이타 베이스 API 로 변환 -> 커넥션 획득 (요기까지) -> 획득한 커넥션을 클라이언트 JDBC-Net 드라이버로 전송 -> 최종 어플리케이션으로 전달

 

TYPE 4 : A native-protocol all-java 드라이버
    - 이것은 JDBC API 호출을 서버의 특정 DBMS에 맞는 프로토콜로 서버로 전송하는 드라이버 입니다. TYPE 2 와 비슷하게 보이지만, 클라이언트의 API 로 변환시키는 작업 없이 직접 DBMS 에 요청을 한다는 것입니다. 그리고 이것은 DBMS 제조 회사에서 제공을 하니까, 보다 더 안정되고 빠른 처리를 하게 되겠죠. 

이것이 thin 드라이버 입니다.

 

개발자는 데이타베이스 제조회사가 제공하는 jdbc 라이브러리를 다운받아서 라이브러리 폴더에 등록만 해주고, 접속은 거기에 맞는 포멧대로만 해주면 그만 이지요. 그건 앞전에 질문하셨으니 아시겠죠 

그럼 ^^


 

